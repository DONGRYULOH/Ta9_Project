<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.example.demo.mypage.dao.MypageDao"><!--namespace를 통해 UserDAO와 연결합니다. -->
  		
  <!-- 파일(비디오,썸네일 이미지)을 제외한 게시글 정보 Insert  -->		
  <insert id="videoBoardInsert" parameterType="com.example.demo.mypage.dto.VideoDto" useGeneratedKeys="true" keyProperty="video_number">  		
  		insert into video(user_id,category_code,video_title,public_check,video_rank_limit)
  				values(#{user_id},#{category_code},#{video_title},#{public_check},#{video_rank_limit})
  		<!-- 게시글이 등록된후 video_number 값을 가져와서 VideoDto에 setter를 이용해서 넣어줌 -->
  		<selectKey keyProperty="video_number" resultType="integer" order="AFTER">
			select max(video_number) from video
		</selectKey>  		  
  </insert>
  		
  		
  <!-- 파일(비디오,썸네일 이미지) Insert  -->		
  <insert id="videoFileInsert" parameterType="hashmap" >
  		insert into video_file(video_number,orgin_video_name,stored_video_name,orgin_video_thumb,stored_video_thumb)
  				values(#{video_number},#{orgin_video_name},#{stored_video_name},#{orgin_video_thumb},#{stored_video_thumb})  		
  </insert>
  		
  <!-- 해당 유저에 해당하는 동영상 게시물 리스트 가져오기(최신순)  -->
  <select id="getVideoList" parameterType="hashmap" resultType="com.example.demo.mypage.dto.VideoJoinVideoFileDto" >
	  	SELECT v.video_number,v.user_id,v.category_code,v.video_title,v.public_check,v.video_reports,v.video_insert_date,v.video_rank_limit,
				vf.orgin_video_name,vf.stored_video_name,vf.orgin_video_thumb,vf.stored_video_thumb,
        		(SELECT count(vr.reply_number) FROM video_reply vr WHERE vr.video_number = v.video_number) AS 'reply_count'
			 FROM video v INNER JOIN video_file vf 
	    	ON v.video_number = vf.video_number
	      WHERE user_id = #{user_id}
	   ORDER BY v.video_number DESC
	  LIMIT #{pageStart},#{perPageNum}
  </select>
  
  <!-- 해당 유저에 해당하는 동영상 게시물 리스트 가져오기(댓글많은순)  -->
  <select id="getVideoRList" parameterType="hashmap" resultType="com.example.demo.mypage.dto.VideoJoinVideoFileDto" >
	  	SELECT v.video_number,v.user_id,v.category_code,v.video_title,v.public_check,v.video_reports,v.video_insert_date,v.video_rank_limit,
				vf.orgin_video_name,vf.stored_video_name,vf.orgin_video_thumb,vf.stored_video_thumb,
       			 (SELECT count(vr.reply_number) FROM video_reply vr WHERE vr.video_number = v.video_number) AS 'reply_count'
			 FROM video v INNER JOIN video_file vf 
	    	ON v.video_number = vf.video_number
	      WHERE user_id = #{user_id}
	    ORDER BY reply_count DESC,v.video_number DESC <!-- 댓글수가 똑같다면 가장 최신에 올린 게시물을 먼저 나오게 함  -->
	  LIMIT #{pageStart},#{perPageNum}
  </select>
	
	<!-- 해당 유저가 오늘날짜에 동영상 게시물을 업로드 헀는지 검사 (없으면 0 , 있으면 1이상)   -->
	<select id="videoUploadCk" parameterType="String" resultType="int" >
		select count(*)
			from video
		 where user_id = #{user_id} and date_format(video_insert_date,'%Y-%m-%d') = curdate()
	</select>
 
  <!-- 오늘날짜에 최초로 동영상을 업로드 했을 때 해당 유저의 경험치를 300EXP 축척시킴 -->
  <update id="ExpUpdate" parameterType="String">
  		update user 
  			set user_exp = user_exp + 300
  		 where user_id = #{user_id}
  </update>
  
	<!--  해당 유저의 등급 상승 여부 확인후 업데이트 하는 스토어드 프로시저 호출  -->
	<select id="rankUpdateCkProcedures" statementType="CALLABLE" parameterType="String">
		{call rankUpdateCk_procedure(#{user_id})}			
	</select>	
	
	<!-- 해당 유저의 정보 가져오기 -->
	<select id="getUserInfo" parameterType="String" resultType="com.example.demo.user.dto.UserDto">
		select * 
			from user 
		 where user_id = #{user_id} 
	</select>
	
	<!-- 해당 동영상 게시물 번호에 해당하는 정보 가져오기  -->
	<select id="getVideoDetail" parameterType="int" resultType="com.example.demo.mypage.dto.VideoJoinVideoFileDto">
		 select v.video_number,v.user_id,v.category_code,v.video_title,v.public_check,v.video_reports,v.video_insert_date,v.video_rank_limit,
					vf.orgin_video_name,vf.stored_video_name,vf.orgin_video_thumb,vf.stored_video_thumb,u.user_nickname,
                    (select count(vr.reply_number) from video_reply vr where vr.video_number = v.video_number) as 'reply_count'
			from video v join video_file vf 
				on v.video_number = vf.video_number
					join user u 
				on v.user_id = u.user_id
	       where v.video_number = #{video_number}
	</select>
	
	<!-- 동영상 테이블에 있는 가장 큰 번호 가져오기 -->
	<select id="videoDetailNumber" resultType="int">
		select max(video_number) from video 
	</select>
	
	<!-- 해당 동영상 게시물 삭제하기 -->
	<delete id="deleteVideo" parameterType="int">
		delete from video where video_number = #{video_number}
	</delete>
	
	<!-- 현재 유저가 삭제하고자 하는 썸네일명을 DB에서 꺼내옴 -->
	<select id="getThumbFileName" parameterType="int" resultType="String">
		select stored_video_thumb 
			from video_file 
		 where video_number = #{video_number}
	</select>
	
	<!-- 해당 동영상 게시물 업데이트(파일 제외) -->
	<update id="videoBrdUpdate" parameterType="com.example.demo.mypage.dto.VideoDto">
			update video 
				set category_code=#{category_code},video_title=#{video_title},public_check=#{public_check},video_rank_limit=#{video_rank_limit}
   			 where video_number = #{video_number}
	</update>
	
	<!-- 해당 동영상 썸네일 업데이트  -->
	<update id="videoThumbUpdate" parameterType="hashmap">
			update video_file
				set orgin_video_thumb=#{orgin_video_thumb},stored_video_thumb=#{stored_video_thumb}
   			 where video_number = #{video_number}
	</update>
	
	 <!-- 현재 세션에 저장되어 있는 유저에 대한 위시리스트 목록 가져오기(최신순)  -->
	  <select id="mypage_cartList" parameterType="hashmap" resultType="com.example.demo.mypage.dto.VideoCart_FileDto" >
		  	select v.video_number,v.user_id,v.category_code,v.video_title,v.public_check,v.video_reports,v.video_insert_date,v.video_rank_limit,
						vf.orgin_video_name,vf.stored_video_name,vf.orgin_video_thumb,vf.stored_video_thumb,vc.video_cart_number,
                        (select count(vr.reply_number) from video_reply vr where vr.video_number = v.video_number) as 'reply_count'
					from (select * from video_cart where user_id = #{user_id}) vc JOIN video v 
				 on vc.video_number = v.video_number
				   JOIN video_file vf 
				on vc.video_number = vf.video_number
		   order by v.video_number desc
		  LIMIT #{pageStart},#{perPageNum}
	  </select>
	  
	   <!-- 현재 세션에 저장되어 있는 유저에 대한 위시리스트 목록 가져오기(댓글많은순)  -->
	  <select id="mypage_cartRList" parameterType="hashmap" resultType="com.example.demo.mypage.dto.VideoCart_FileDto" >
		  	select v.video_number,v.user_id,v.category_code,v.video_title,v.public_check,v.video_reports,v.video_insert_date,v.video_rank_limit,
						vf.orgin_video_name,vf.stored_video_name,vf.orgin_video_thumb,vf.stored_video_thumb,vc.video_cart_number,
                        (select count(vr.reply_number) from video_reply vr where vr.video_number = v.video_number) as 'reply_count'
					from (select * from video_cart where user_id = #{user_id}) vc JOIN video v 
				 on vc.video_number = v.video_number
				   JOIN video_file vf 
				on vc.video_number = vf.video_number
		   order by reply_count desc,v.video_number desc
		  LIMIT #{pageStart},#{perPageNum}
	  </select>
	  
	  <!-- 동영상 게시물 위시리스트 페이지에서 해당 게시물 제거 -->
	  <delete id="mypage_cartDelete" parameterType="int">
	  		delete from video_cart where video_cart_number = #{video_cart_number} 
	  </delete>
	
	<!-- 해당 유저의 총 동영상 게시물 수  -->
	<select id="userTotalCount" parameterType="String" resultType="int">
		select count(*)
				from video 			
   		  where user_id = #{user_id}
	</select>
	
	<!-- 해당 유저의 위시리스트 총 동영상 게시물 수  -->
	<select id="userCartTotalCount" parameterType="String" resultType="int">
		select count(*)
				from video_cart 			
   		  where user_id = #{user_id}
	</select>
</mapper>
















