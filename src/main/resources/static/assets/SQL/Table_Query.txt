
-- 비디오 테이블 
CREATE TABLE video (
	video_number	INT	NOT NULL auto_increment,
	user_id	VARCHAR(20)	NOT NULL,
	category_code	VARCHAR(10)	NOT NULL,
	video_title	VARCHAR(150) NOT NULL,
	public_check	CHAR(1)	NOT NULL,
	video_reports	INT	NOT NULL DEFAULT 0,
	video_insert_date	DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	video_rank_limit INT NOT NULL DEFAULT 0,
    PRIMARY KEY(video_number)
);

-- 유저 테이블 
CREATE TABLE `user` (
	`user_id`	VARCHAR(20)	NOT NULL,
	`user_pwd`	VARCHAR(100)	NOT NULL,
	`user_nickname`	VARCHAR(20)	NOT NULL,
	`user_exp`	INT	NOT NULL	DEFAULT 0,
	`user_rank`	VARCHAR(20)	NOT NULL DEFAULT 'Bronze',
	`user_rank_code`	INT	NOT NULL DEFAULT 1,
	`user_insertdate`	DATETIME	NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`user_leavedate`	DATETIME	NULL
);

-- 비디오_카테고리 테이블 
CREATE TABLE `video_category` (
	`category_code`	VARCHAR(10)	NOT NULL,
	`category_name`	VARCHAR(50)	NOT NULL
);

insert into video_category(category_code,category_name) 
		values("101","스포츠");
insert into video_category(category_code,category_name) 
		values("102","개발");
insert into video_category(category_code,category_name) 
		values("103","경제");        
insert into video_category(category_code,category_name) 
		values("104","외국어");
insert into video_category(category_code,category_name) 
		values("105","ETC");    

-- 비디오_파일 테이블 
CREATE TABLE `video_file` (
	`video_number`	INT	NOT NULL,
	`orgin_video_name`	VARCHAR(300)	NULL,
	`stored_video_name`	VARCHAR(300)	NULL,
	`orgin_video_thumb`	VARCHAR(300)	NULL,
	`stored_video_thumb`	VARCHAR(300)	NULL
);

-- 비디오 댓글 테이블 
CREATE TABLE `video_reply` (
	`reply_number`	INT	NOT NULL AUTO_INCREMENT,
	`video_number`	INT	NOT NULL,
	`reply_content`	VARCHAR(100) NOT NULL,
	`reply_register`VARCHAR(20) NOT NULL,
	`reply_insert_date`	DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`reply_orgin_number` INT NOT NULL,
	`reply_order`	INT	NOT NULL,
	`reply_depth`	INT	NOT NULL,
    primary key(reply_number)
);

-- 출석체크 테이블 
CREATE TABLE `attendance` (
	`att_number` INT NOT NULL AUTO_INCREMENT,
	`user_id`	VARCHAR(20)	NOT NULL,
	`att_date`	DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY(att_number)
);

-- 신고 테이블 
CREATE TABLE `blame` (
	`blame_number`	INT	NOT NULL AUTO_INCREMENT,
	`video_number`	INT	NOT NULL,
	`user_id`	VARCHAR(20)	NOT NULL,
	`blame_date`	DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`blame_name`	VARCHAR(300) NOT NULL,
    PRIMARY KEY(blame_number)
);


-- 비디오 위시리스트 테이블 
CREATE TABLE `video_cart` (
	`video_cart_number`	INT	NOT NULL AUTO_INCREMENT,
	`user_id`	VARCHAR(20)	NOT NULL,
	`video_number`	INT	NOT NULL,
    PRIMARY KEY(video_cart_number)
);

-- user 테이블 PK 제약조건 
ALTER TABLE `user` ADD CONSTRAINT `PK_USER` PRIMARY KEY (
	`user_id`
);

-- video_category 테이블 PK 제약조건 
ALTER TABLE `video_category` ADD CONSTRAINT `PK_VIDEO_CATEGORY` PRIMARY KEY (
	`category_code`
);

-- 위시리스트 FK 
ALTER TABLE `video_cart` ADD CONSTRAINT `FK_user_TO_video_cart_1` FOREIGN KEY (
	`user_id`
)
REFERENCES `user` (
	`user_id`
);

-- 위시리스트 FK(비디오 테이블에 있는 해당 비디오 게시글이 지워지면 게시글 번호에 해당하는 위시리스트에 있는 게시글도 지워짐)  
ALTER TABLE `video_cart` ADD CONSTRAINT `FK_video_TO_video_cart_1` FOREIGN KEY (
	`video_number`
)
REFERENCES `video` (
	`video_number`
) on delete cascade;

-- video 테이블 + user 테이블 비식별 관계 
ALTER TABLE `video` ADD CONSTRAINT `FK_user_TO_video_1` FOREIGN KEY (
	`user_id`
)
REFERENCES `user` (
	`user_id`
);

-- video 테이블 + video_category 테이블 비식별 관계 
ALTER TABLE `video` ADD CONSTRAINT `FK_video_category_TO_video_1` FOREIGN KEY (
	`category_code`
)
REFERENCES `video_category` (
	`category_code`
);

-- video_file 테이블 PK 제약조건 
ALTER TABLE `video_file` ADD CONSTRAINT `PK_VIDEO_FILE` PRIMARY KEY (
	`video_number`
);

-- <video_file 테이블 video 테이블 식별관계> 
-- 비디오 테이블의 해당 컬럼이 삭제되면 해당 컬럼을 참조하는 비디오_파일 행도 삭제가 되는 제약 조건 
alter table video_file add constraint `videoFile_video`
foreign key(video_number)
references video(video_number) on delete cascade; 

-- 출석체크 테이블 유저 테이블 비식별관계 
ALTER TABLE `attendance` ADD CONSTRAINT `FK_attendance_TO_user_1` FOREIGN KEY (
	`user_id`
)
REFERENCES `user` (
	`user_id`
);

-- 출석체크 테이블 + user 테이블 식별관계 
ALTER TABLE `attendance` ADD CONSTRAINT `FK_user_TO_attendance_1` FOREIGN KEY (
	`user_id`
)
REFERENCES `user` (
	`user_id`
);

-- 신고 테이블 + video 테이블 비식별관계 
ALTER TABLE `blame` ADD CONSTRAINT `FK_video_TO_blame_1` FOREIGN KEY (
	`video_number`
)
REFERENCES `video` (
	`video_number`
) on delete cascade;

-- 신고테이블 + user 테이블 비식별관계 
ALTER TABLE `blame` ADD CONSTRAINT `FK_user_TO_blame_1` FOREIGN KEY (
	`user_id`
)
REFERENCES `user` (
	`user_id`
);


-- 비디오 댓글 테이블 + 비디오 테이블 비식별 관계 
ALTER TABLE `video_reply` ADD CONSTRAINT `FK_video_TO_video_reply_1` FOREIGN KEY (
	`video_number`
)
REFERENCES `video` (
	`video_number`
) on delete cascade;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 테이블 생성 + 제약조건 끝 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


-- 동영상 게시물 업로드시 하루에 한번만 100P 지급 
-- 해당 유저가 오늘날짜에 동영상 게시물을 업로드 헀는지 검사 (없으면 0 , 있으면 1이상) 
select count(*)
	from video
 where user_id = 'admin' and date_format(video_date,'%Y-%m-%d') = curdate();
 
 
 
 -- <해당 유저의 등급 상승 여부 확인후 업데이트 하는 스토어드 프로시저>
 CREATE DEFINER=`root`@`%` PROCEDURE `rankUpdateCk_procedure`(
	IN this_user_id VARCHAR(20)
)
BEGIN
	DECLARE exp INT;
    SELECT user_exp into exp FROM user WHERE user_id = this_user_id;
    IF(exp >= 1000  AND exp < 3000) THEN 
		UPDATE user SET user_rank = 'Silver',user_rank_code = 2 where user_id = this_user_id; 
	ELSEIF(exp >= 3000 AND exp < 10000) THEN 
		UPDATE user SET user_rank = 'Gold',user_rank_code = 3 where user_id = this_user_id;
	ELSEIF(exp >= 10000) THEN 
		UPDATE user SET user_rank = 'Platinum',user_rank_code = 4 where user_id = this_user_id;		
	END IF;   
END
 

call rankUpdateCk_procedure('admin');




################# 테이블 삭제 순서 #####################
drop table video_cart;
drop table attendance;
drop table blame;
drop table video_file;
drop table video;
drop table video_category;
drop table user;






